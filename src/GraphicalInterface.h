// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef GraphicalInterface_h
#define GraphicalInterface_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "MultiresolutionMesh.h"
#include "MultiresolutionProcessing.h"
#include <FL/fl_ask.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Color_Chooser.H>
#include "Visualizer.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Float_Input.H>
#include <FL/Fl_Counter.H>

class GraphicalInterface {
#include <string>
#include <vector>
  MultiresolutionMesh* mesh; 
  MultiresolutionProcessing* mesh_processing; 
  char title[1024]; 
  char status[256]; 
  Vector3d translation_vector; 
  double scale_factor; 
  Vector3d background_color; 
public:
  GraphicalInterface();
private:
  Fl_Double_Window *window_main;
  void cb_window_main_i(Fl_Double_Window*, void*);
  static void cb_window_main(Fl_Double_Window*, void*);
  Fl_Menu_Bar *menu_bar;
  static Fl_Menu_Item menu_menu_bar[];
  static Fl_Menu_Item *menu_file;
  static Fl_Menu_Item *menu_file_open;
  void cb_menu_file_open_i(Fl_Menu_*, void*);
  static void cb_menu_file_open(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_file_save;
  void cb_menu_file_save_i(Fl_Menu_*, void*);
  static void cb_menu_file_save(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_file_information;
  void cb_menu_file_information_i(Fl_Menu_*, void*);
  static void cb_menu_file_information(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_file_quit;
  void cb_menu_file_quit_i(Fl_Menu_*, void*);
  static void cb_menu_file_quit(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing;
  static Fl_Menu_Item *menu_processing_analysis;
  void cb_menu_processing_analysis_i(Fl_Menu_*, void*);
  static void cb_menu_processing_analysis(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_coloring;
  void cb_menu_processing_coloring_i(Fl_Menu_*, void*);
  static void cb_menu_processing_coloring(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_filtering;
  void cb_menu_processing_filtering_i(Fl_Menu_*, void*);
  static void cb_menu_processing_filtering(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_denoising;
  void cb_menu_processing_denoising_i(Fl_Menu_*, void*);
  static void cb_menu_processing_denoising(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_thresholding;
  void cb_menu_processing_thresholding_i(Fl_Menu_*, void*);
  static void cb_menu_processing_thresholding(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_simplification;
  void cb_menu_processing_simplification_i(Fl_Menu_*, void*);
  static void cb_menu_processing_simplification(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_test;
  void cb_menu_processing_test_i(Fl_Menu_*, void*);
  static void cb_menu_processing_test(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_processing_reset;
  void cb_menu_processing_reset_i(Fl_Menu_*, void*);
  static void cb_menu_processing_reset(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view;
  static Fl_Menu_Item *menu_view_solid;
  void cb_menu_view_solid_i(Fl_Menu_*, void*);
  static void cb_menu_view_solid(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_wireframe;
  void cb_menu_view_wireframe_i(Fl_Menu_*, void*);
  static void cb_menu_view_wireframe(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_vertices;
  void cb_menu_view_vertices_i(Fl_Menu_*, void*);
  static void cb_menu_view_vertices(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_normals;
  void cb_menu_view_normals_i(Fl_Menu_*, void*);
  static void cb_menu_view_normals(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_colors;
  void cb_menu_view_colors_i(Fl_Menu_*, void*);
  static void cb_menu_view_colors(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_texture;
  void cb_menu_view_texture_i(Fl_Menu_*, void*);
  static void cb_menu_view_texture(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_smooth;
  void cb_menu_view_smooth_i(Fl_Menu_*, void*);
  static void cb_menu_view_smooth(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_antialiasing;
  void cb_menu_view_antialiasing_i(Fl_Menu_*, void*);
  static void cb_menu_view_antialiasing(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_background_color;
  void cb_menu_view_background_color_i(Fl_Menu_*, void*);
  static void cb_menu_view_background_color(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_view_transformation;
  void cb_menu_view_transformation_i(Fl_Menu_*, void*);
  static void cb_menu_view_transformation(Fl_Menu_*, void*);
  static Fl_Menu_Item *menu_help;
  static Fl_Menu_Item *menu_help_about;
  void cb_menu_help_about_i(Fl_Menu_*, void*);
  static void cb_menu_help_about(Fl_Menu_*, void*);
  Visualizer *visualizer;
  Fl_Box *status_bar;
  Fl_Double_Window *window_message;
  Fl_Box *text_message;
  Fl_Double_Window *window_information;
  Fl_Double_Window *window_coloring;
  Fl_Value_Slider *coloring_slider_level;
  Fl_Choice *coloring_choice_details;
  static Fl_Menu_Item menu_coloring_choice_details[];
public:
  Fl_Check_Button *coloring_smooth;
private:
  Fl_Button *coloring_button_update;
  void cb_coloring_button_update_i(Fl_Button*, void*);
  static void cb_coloring_button_update(Fl_Button*, void*);
  Fl_Double_Window *window_filtering;
  Fl_Slider *filtering_slider_1;
  Fl_Slider *filtering_slider_2;
  Fl_Slider *filtering_slider_3;
  Fl_Slider *filtering_slider_4;
  Fl_Slider *filtering_slider_5;
  Fl_Slider *filtering_slider_6;
  Fl_Button *filtering_button_update;
  void cb_filtering_button_update_i(Fl_Button*, void*);
  static void cb_filtering_button_update(Fl_Button*, void*);
  Fl_Double_Window *window_denoising;
  Fl_Float_Input *denoising_input_threshold;
  Fl_Value_Slider *denoising_slider_level;
  Fl_Choice *denoising_choice_type;
  static Fl_Menu_Item menu_denoising_choice_type[];
  Fl_Button *denoising_button_update;
  void cb_denoising_button_update_i(Fl_Button*, void*);
  static void cb_denoising_button_update(Fl_Button*, void*);
  Fl_Double_Window *window_thresholding;
  Fl_Float_Input *thresholding_input_threshold;
  Fl_Value_Slider *thresholding_slider_level;
  Fl_Choice *thresholding_choice_details;
  static Fl_Menu_Item menu_thresholding_choice_details[];
  Fl_Choice *thresholding_choice_morpho;
  void cb_thresholding_choice_morpho_i(Fl_Choice*, void*);
  static void cb_thresholding_choice_morpho(Fl_Choice*, void*);
  static Fl_Menu_Item menu_thresholding_choice_morpho[];
  Fl_Counter *thresholding_counter_iterations;
  Fl_Button *thresholding_button_update;
  void cb_thresholding_button_update_i(Fl_Button*, void*);
  static void cb_thresholding_button_update(Fl_Button*, void*);
  Fl_Double_Window *window_simplification;
  Fl_Float_Input *simplification_input_threshold;
  Fl_Value_Slider *simplification_slider_level;
  Fl_Choice *simplification_choice_details;
  static Fl_Menu_Item menu_simplification_choice_details[];
public:
  Fl_Check_Button *simplification_check_viewdependent;
private:
  Fl_Button *simplification_button_update;
  void cb_simplification_button_update_i(Fl_Button*, void*);
  static void cb_simplification_button_update(Fl_Button*, void*);
  Fl_Double_Window *window_transformation;
  Fl_Float_Input *transformation_input_rotation_x;
  Fl_Float_Input *transformation_input_rotation_y;
  Fl_Float_Input *transformation_input_rotation_z;
  Fl_Button *transformation_button_update;
  void cb_transformation_button_update_i(Fl_Button*, void*);
  static void cb_transformation_button_update(Fl_Button*, void*);
public:
  ~GraphicalInterface();
  void Show(int argc, char** argv);
private:
  void LoadModel();
  void SaveModel();
  void Analysis();
  bool Information();
  void Exit();
public:
  void UpdateStatus();
private:
  void UpdateWindows();
  void ResetWindows();
  void ResetProcessing();
  void ShowWindowInformation();
  void ShowWindowColoring();
  void ShowWindowFiltering();
  void ShowWindowDenoising();
  void ShowWindowThresholding();
  void ShowWindowSimplification();
  void ShowWindowTransformation();
  void ViewSolid();
  void ViewWireframe();
  void ViewVertices();
  void ViewNormals();
  void ViewColors();
  void ViewTexture();
  void ViewSmooth();
  void ViewAntialiasing();
  void ViewBackgroundColor();
  void OptionTexture2Colors();
  void UpdateColoring();
  void UpdateFiltering();
  void UpdateDenoising();
  void UpdateThresholding();
  void UpdateSimplification();
  void UpdateThresholdingMorpho();
  void UpdateTransformation();
  void ShowMessage(const char* msg);
  void HideMessage();
  void About();
  void TestProcessing();
};
#endif
